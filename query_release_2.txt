Part 1 Release 2
--Release 2--

--Tampilkan menus beserta nama-kategorinya.
SELECT m."name", c."name" AS "categoryName",m."price" AS "harga" FROM "Menuss" m INNER JOIN "Categories" c ON m."categoryId" = c.id 


--Tampilkan menus dengan nama-kategori Tea.
SELECT m."name", c."name" AS "categoryName",m."price" AS "harga" FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c.id
WHERE c."name" = 'Tea'



--Tampilkan menus dengan stock terbanyak dari nama-kategori Toast.
SELECT m."name", c."name" AS "categoryName",m."stock" AS "maxStock" 
FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c.id
WHERE c."name" = 'Toast' 
AND m."stock" = (
		SELECT max(m."stock") FROM "Menus" m 
		INNER JOIN "Categories" c ON m."categoryId" = c."id"
		WHERE  c."name" = 'Toast'
)



--Tampilkan menus beserta nama-kategorinya dengan harga termahal.
SELECT m."name", c."name" AS "categoryName", m."price" 
FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c."id"
WHERE m."price" = (
	SELECT max(m."price")
	FROM "Menus" m
	INNER JOIN "Categories" c ON m."categoryId" = c."id"
)



--Tampilkan harga rata-rata dari menus yang mempunyai nama-kategori Espresso.
SELECT m."name", c."name" AS "categoryName", m."price" 
FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c."id"
WHERE c."name" = 'Espresso' 
AND m."price" >= (
	SELECT AVG(m."price")
	FROM "Menus" m	INNER JOIN "Categories" c ON m."categoryId" = c."id"
	WHERE c."name" = 'Espresso' 
)



--Tampilkan jumlah stock dari menus yang mempunyai nama-kategori Tea
SELECT m."name", c."name" AS "categoryName",m."stock" AS "maxStock" 
FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c.id
WHERE c."name" = 'Tea' 



--Tampilkan jumlah stock dari menus yang ditambahkan di bulan agustus dari nama-kategori Espresso.
SELECT m."name", c."name" AS "categoryName",m."stock" AS "maxStock", m."createdAt" 
FROM "Menus" m 
INNER JOIN "Categories" c ON m."categoryId" = c.id
WHERE c."name" = 'Espresso'
AND date_part('month' ,m."createdAt") = 8 


--Command node app.js query-1
--Buatlah Query SQL untuk menampilkan menu, yang mempunyai kategori Coffee dan di menu mulai bulan Mei 2021 - Juni 2021 dan data diurutkan berdasarkan tanggal
SELECT m."id", m."name", m."price", m."stock", c."name" AS "category", m."createdAt" FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c.id
WHERE c."name" = 'Coffee'
AND date_part('month',m."createdAt") >=5 AND date_part('month',m."createdAt") <= 6

--Command node app.js query-2
--Buatlah Query SQL untuk menampilkan menu yang mempunyai jumlah stok terbanyak di database
SELECT m."id", m."name", m."price", m."stock", c."name" AS "category", m."createdAt" FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c.id
WHERE  m."stock" = (
		SELECT max(m."stock") FROM "Menus" m 
		INNER JOIN "Categories" c ON m."categoryId" = c."id"
)


--Command node app.js query-3
--Buatlah Query SQL untuk menampilkan menu dimana nama barangnya mengandung kata “tea”
SELECT m."id", m."name", m."price", m."stock", c."name" AS "category", m."createdAt" FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c.id
WHERE m."name" ILIKE  '%tea%'

--Command node app.js query-4
--Buatlah Query SQL untuk menampilkan menu dan kategorinya yang mempunyai stok terbanyak dari tanggal 2021-06-02 s/d 2021-07-09.
SELECT m."id", m."name", m."price", m."stock", c."name" AS "category", m."createdAt" FROM "Menus" m INNER JOIN "Categories" c ON m."categoryId" = c.id
WHERE m."createdAt" BETWEEN '2021-06-02' AND '2021-07-09'
AND m."stock" = (
		SELECT max(m."stock") FROM "Menus" m 
		INNER JOIN "Categories" c ON m."categoryId" = c."id"
		WHERE  m."createdAt" BETWEEN '2021-06-02' AND '2021-07-09'
)



--Command node app.js query-5
--Buatlah Query SQL untuk menampilkan nama kategori yang mempunyai harga penjualan diatas 3.000.000 dan data diurutkan dari penjualan yang terbanyak.
--Harga penjualan adalah stok x harga.
SELECT c."name" AS "category", 
		sum(m."stock") AS "totalStock",
		sum(m."stock" * m."price") AS "totalSales"
FROM "Menus" m 
INNER JOIN "Categories" c ON m."categoryId" = c."id"
GROUP BY c."name"
HAVING sum(m."stock" * m."price") > 3000000
ORDER BY "totalSales" DESC;
